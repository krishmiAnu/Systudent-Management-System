/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.edu.view.user;

import java.awt.Color;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.ijse.edu.controller.ManageQuestionController;
import lk.ijse.edu.controller.PaperController;
import lk.ijse.edu.controller.ResultController;
import lk.ijse.edu.controller.StudentController;
import lk.ijse.edu.controller.SubjectController;
import lk.ijse.edu.dto.QuestionDTO;
import lk.ijse.edu.dto.PaperDTO;
import lk.ijse.edu.dto.ResultDTO;
import lk.ijse.edu.dto.StudentDTO;
import lk.ijse.edu.dto.SubjectDTO;
import lk.ijse.edu.observer.Observer;
import lk.ijse.edu.proxy.ProxyHandler;
import lk.ijse.edu.service.ServiceFactory;
import lk.ijse.edu.view.admin.ManagePaper;
//import lk.ijse.edu.

/**
 *
 * @author Krishanthi
 */
public class ExamPaper extends javax.swing.JPanel implements Observer {

    private SubjectController subjectController;
    private PaperController paperController;
    private DefaultTableModel dtm;
    List<QuestionDTO> questionList;
    int count = 0;
    String[] answerList ;
    String[] correctAnswers;
    static String nic;
    String markAnswer = null;

    /**
     * Creates new form ExamPaper
     */
    public ExamPaper() {
        initComponents();
        setDate();
        setTime();
        try {
            loadSubjects();
            UnicastRemoteObject.exportObject(this, 0);
            PaperController.getSubject().registerObserver(this);
            SubjectController.getSubject().registerObserver(this);
        } catch (RemoteException ex) {
            Logger.getLogger(ManagePaper.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ManagePaper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ExamPaper(String NIC) {
        nic = NIC;
        loadStudentDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblNIC = new javax.swing.JLabel();
        txtNIC = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblStudent = new javax.swing.JLabel();
        lblExamCode = new javax.swing.JLabel();
        txtStudent = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        txtExamCode = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        lblExamTime = new javax.swing.JLabel();
        txtExamTime = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        lblQuestionCount = new javax.swing.JLabel();
        txtQuestionCount = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSkipQuestion = new javax.swing.JTable();
        txtQuestionID = new javax.swing.JTextField();
        lblAnswer = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LoardQuestion = new javax.swing.JTextArea();
        lblQID = new javax.swing.JLabel();
        lbl1 = new javax.swing.JLabel();
        lbl2 = new javax.swing.JLabel();
        lbl4 = new javax.swing.JLabel();
        lbl3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblQCount = new javax.swing.JLabel();
        lblTimeNow = new javax.swing.JLabel();
        lblCountNow = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblYouAnswer = new javax.swing.JTable();
        lblIconClock = new javax.swing.JLabel();
        lblNextButton = new javax.swing.JLabel();
        lblSkipButton = new javax.swing.JLabel();
        lblStartButton = new javax.swing.JLabel();
        lblPreviousButton = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        rbtnAns2 = new javax.swing.JRadioButton();
        rbtnAns1 = new javax.swing.JRadioButton();
        rbtnAns4 = new javax.swing.JRadioButton();
        rbtnAns3 = new javax.swing.JRadioButton();
        lblTime = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        cmbSubject = new javax.swing.JComboBox();
        lblSubmitButton = new javax.swing.JLabel();
        lblExam = new javax.swing.JLabel();
        cmbExam = new javax.swing.JComboBox();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("User >> ExamPaper");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, 140, 20));

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/Material Icons_e22b(7)_48.png"))); // NOI18N
        jLabel1.setText("   Exam Paper.");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 35));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNIC.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblNIC.setText("NIC");
        jPanel2.add(lblNIC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 49, 82, 25));

        txtNIC.setBorder(null);
        txtNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNICActionPerformed(evt);
            }
        });
        jPanel2.add(txtNIC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 210, 20));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 210, 10));

        lblStudent.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblStudent.setText("Student Name");
        jPanel2.add(lblStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 82, 25));

        lblExamCode.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblExamCode.setText("Exam Code");
        jPanel2.add(lblExamCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 82, 25));

        txtStudent.setBorder(null);
        jPanel2.add(txtStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 210, 20));
        jPanel2.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 210, 10));

        txtExamCode.setBorder(null);
        jPanel2.add(txtExamCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 210, 20));
        jPanel2.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 210, 10));

        lblExamTime.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblExamTime.setText("Exam Time");
        jPanel2.add(lblExamTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 82, 25));

        txtExamTime.setBorder(null);
        jPanel2.add(txtExamTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 210, 20));
        jPanel2.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 210, 10));

        lblQuestionCount.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblQuestionCount.setText("Question Count");
        jPanel2.add(lblQuestionCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 90, 25));

        txtQuestionCount.setBorder(null);
        jPanel2.add(txtQuestionCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 210, 20));
        jPanel2.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 210, 10));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 53, 280, 486));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblSkipQuestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "QID", "Question"
            }
        ));
        tblSkipQuestion.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(tblSkipQuestion);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 271, 249, 100));
        jPanel4.add(txtQuestionID, new org.netbeans.lib.awtextra.AbsoluteConstraints(119, 54, 110, 25));

        lblAnswer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAnswer.setText("Answer :");
        jPanel4.add(lblAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 70, 25));

        LoardQuestion.setColumns(20);
        LoardQuestion.setForeground(new java.awt.Color(153, 153, 255));
        LoardQuestion.setRows(5);
        jScrollPane2.setViewportView(LoardQuestion);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 93, 530, 117));

        lblQID.setText("Question ID :");
        jPanel4.add(lblQID, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 54, 80, 25));

        lbl1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl1.setText("1)");
        jPanel4.add(lbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 20, 30));

        lbl2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl2.setText("2)");
        jPanel4.add(lbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, 20, 30));

        lbl4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl4.setText("4)");
        jPanel4.add(lbl4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 20, 30));

        lbl3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl3.setText("3)");
        jPanel4.add(lbl3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 20, 30));

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 6));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Submit Your Answer Sheet After");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Complete the Paper.");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/FontAwesome_f071(0)_64.png"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 390, 320, 70));

        lblQCount.setText("View Question Count :");
        jPanel4.add(lblQCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 130, 25));

        lblTimeNow.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblTimeNow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimeNow.setText("00");
        lblTimeNow.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                lblTimeNowAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jPanel4.add(lblTimeNow, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 50, 40));

        lblCountNow.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblCountNow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCountNow.setText("00");
        jPanel4.add(lblCountNow, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 50, 40));

        jLabel27.setBackground(new java.awt.Color(102, 102, 102));
        jLabel27.setForeground(new java.awt.Color(102, 102, 102));
        jLabel27.setText("Your Answer.");
        jPanel4.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, 90, 20));

        tblYouAnswer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "QID", "Answer"
            }
        ));
        tblYouAnswer.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane4.setViewportView(tblYouAnswer);

        jPanel4.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, 249, 100));

        lblIconClock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/Entypo_23f3(6)_64.png"))); // NOI18N
        jPanel4.add(lblIconClock, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 50, 50));

        lblNextButton.setBackground(new java.awt.Color(51, 153, 0));
        lblNextButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblNextButton.setForeground(new java.awt.Color(255, 255, 255));
        lblNextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/octicons_f05a(0)_42_1.png"))); // NOI18N
        lblNextButton.setText("Next");
        lblNextButton.setOpaque(true);
        lblNextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNextButtonMouseClicked(evt);
            }
        });
        jPanel4.add(lblNextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 110, 30));

        lblSkipButton.setBackground(new java.awt.Color(255, 0, 0));
        lblSkipButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSkipButton.setForeground(new java.awt.Color(255, 255, 255));
        lblSkipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/octicons_f0bd(0)_42.png"))); // NOI18N
        lblSkipButton.setText("Skip");
        lblSkipButton.setOpaque(true);
        lblSkipButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSkipButtonMouseClicked(evt);
            }
        });
        jPanel4.add(lblSkipButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 220, 80, 30));

        lblStartButton.setBackground(new java.awt.Color(51, 153, 255));
        lblStartButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStartButton.setForeground(new java.awt.Color(255, 255, 255));
        lblStartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/icomoon_e68b(0)_42.png"))); // NOI18N
        lblStartButton.setText("Start");
        lblStartButton.setOpaque(true);
        lblStartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblStartButtonMouseClicked(evt);
            }
        });
        jPanel4.add(lblStartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, 30));

        lblPreviousButton.setBackground(new java.awt.Color(255, 204, 0));
        lblPreviousButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPreviousButton.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousButton.setText("  Previous");
        lblPreviousButton.setOpaque(true);
        lblPreviousButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPreviousButtonMouseClicked(evt);
            }
        });
        jPanel4.add(lblPreviousButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 220, 80, 30));

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 148, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, 270, 150));

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel25.setBackground(new java.awt.Color(102, 102, 102));
        jLabel25.setForeground(new java.awt.Color(102, 102, 102));
        jLabel25.setText("Skipped Question.");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 220, 270, 160));

        rbtnAns2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbtnAns2);
        jPanel4.add(rbtnAns2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, 360, 30));

        rbtnAns1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbtnAns1);
        jPanel4.add(rbtnAns1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 360, 30));

        rbtnAns4.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbtnAns4);
        jPanel4.add(rbtnAns4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 410, 360, 30));

        rbtnAns3.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbtnAns3);
        jPanel4.add(rbtnAns3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 360, 360, 30));

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 870, 470));

        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTimeMouseClicked(evt);
            }
        });
        jPanel3.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 70, 150, 30));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(204, 204, 204));
        jLabel17.setText("YYYY / MM / DD");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 60, 150, 10));

        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.add(lblDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 20, 150, 30));

        lblSubject.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSubject.setForeground(new java.awt.Color(255, 255, 255));
        lblSubject.setText("Subject :");
        jPanel3.add(lblSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 130, 110, 20));

        cmbSubject.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Select Subject-" }));
        cmbSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubjectActionPerformed(evt);
            }
        });
        jPanel3.add(cmbSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 160, 140, -1));

        lblSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSubmitButton.setForeground(new java.awt.Color(255, 255, 255));
        lblSubmitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/ijse/edu/images/FontAwesome_f180(5)_46.png"))); // NOI18N
        lblSubmitButton.setText("Submit");
        jPanel3.add(lblSubmitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 440, 140, 30));

        lblExam.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblExam.setForeground(new java.awt.Color(255, 255, 255));
        lblExam.setText("Exam :");
        jPanel3.add(lblExam, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 200, 110, 20));

        cmbExam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Select Exam-" }));
        cmbExam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbExamItemStateChanged(evt);
            }
        });
        cmbExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbExamActionPerformed(evt);
            }
        });
        jPanel3.add(cmbExam, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 230, 140, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 53, 1060, 490));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lblTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTimeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblTimeMouseClicked

    private void lblNextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNextButtonMouseClicked
        getSelectedAnswer();
        buttonGroup1.clearSelection();
        count++;
        lblPreviousButton.setVisible(true);
        int questionCount = Integer.parseInt(lblCountNow.getText());
        questionCount--;
        lblCountNow.setText(Integer.toString(questionCount));
        if (count != questionList.size()) {
            setQuestion();
            getMarkedAnswers();
        } else {
            calculateAnswer();
            calculateResult();
        }
        if (count == questionList.size() - 1) {
            System.out.println(count);
            lblNextButton.setText("Submit");
        }
    }//GEN-LAST:event_lblNextButtonMouseClicked

    private void lblPreviousButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPreviousButtonMouseClicked
        buttonGroup1.clearSelection();
        count--;
        lblNextButton.setVisible(true);
        setQuestion();
        getMarkedAnswers();
        if (count == 0) {
            lblPreviousButton.setVisible(false);
        }
        int questionCount = Integer.parseInt(lblCountNow.getText());
        questionCount++;
        lblCountNow.setText(Integer.toString(questionCount));
        if (count != questionList.size() - 1) {
            lblNextButton.setText("Next");
        }
    }//GEN-LAST:event_lblPreviousButtonMouseClicked

    private void lblSkipButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSkipButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblSkipButtonMouseClicked

    private void lblStartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStartButtonMouseClicked
//        //ResultController resultController;
//        List<ResultDTO> allResults = null;
//        try {
//
//            allResults = ResultController.getAllResults();
//        } catch (Exception ex) {
//            Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, ex);
//        }
        String subject = cmbSubject.getSelectedItem().toString();
        String examTitle = cmbExam.getSelectedItem().toString();
        //String questionId = txtQuestionID.getText();
        //String question = LoardQuestion.getText();
        int duration = 0;
//        for (ResultDTO allResult : allResults) {
//            if (allResults.isEmpty() || !allResult.getExam().equals(examTitle) || !allResult.getSubject().equals(subject) || !allResult.getNic().equals(txtNIC.getText())) {
//                try {
//                    jPanel4.setVisible(true);
//                    //PaperDTO searchPaper = paperController.SearchPaper(examTitle, subject);
////                    QuestionDTO searchQuestion = ManageQuestionController.SearchQuestion(questionId,question);

                    PaperDTO paperDTO = null;
                    List<PaperDTO> allPapers;
        try {
            allPapers = PaperController.getAllPapers();
        
                    for (PaperDTO allPaper : allPapers) {
                        if (allPaper.getSubjectDTO().getSubjectName().equalsIgnoreCase(cmbSubject.getSelectedItem().toString()) && allPaper.getExamTitle().equalsIgnoreCase(cmbExam.getSelectedItem().toString())) {
                            paperDTO = allPaper;
                        }
                    }

                    duration = paperDTO.getDuration();
                    String date = paperDTO.getDate();
                    String time = paperDTO.getTime();
                    lblTimeNow.setText(Integer.toString(duration));
                    lblCountNow.setText(Integer.toString(paperDTO.getQuestionCount()));

                    ////////setQuestion();

//                    PaperDTO dTO = new PaperDTO();
//                    duration = searchPaper.getDuration();
//                    questionList = searchPaper.getQuestionList();
////                    answerList = new String[questionList.size()];
////                    correctAnswers();
                    } catch (Exception ex) {
                        Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        timeDuration(duration);
////                } catch (Exception e) {
////                }
////            }
////        }

    }//GEN-LAST:event_lblStartButtonMouseClicked

    private void cmbSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubjectActionPerformed
        //cmbExam.removeAllItems();
        LoadToExam();
    }//GEN-LAST:event_cmbSubjectActionPerformed

    private void cmbExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExamActionPerformed
//        String cmb=cmbExam.getSelectedItem().toString();
//        System.out.println(cmb);
//        
//        try {
//            List<PaperDTO>paperDTOs=PaperController.getAllPapers();
//            int paperID = 0;
//            for (PaperDTO paperDTO : paperDTOs) {
//                paperID = paperDTO.getPaperId();
//                
//            }
//            List<QuestionDTO>questionDTOs=ManageQuestionController.getAllManageQuestions();
////            for (PaperDTO paperDTO : paperDTOs) {
////                if(paperDTO.getExamTitle().equalsIgnoreCase(cmbExam.getSelectedItem().toString())){
//                    for (QuestionDTO questionDTO : questionDTOs) {
//                        if(questionDTO.getPaperDTO().getExamTitle().equalsIgnoreCase(cmbExam.getSelectedItem().toString())){
//                            questionList.add(questionDTO);
//                            System.out.println(questionDTO.getQuestion());
                            
//                            LoardQuestion.setText(questionDTO.getQuestion());
//                            String questionId = questionDTO.getQuestionID();
//                            List<String> shuffleArray = new ArrayList<>();
//                            shuffleArray.add(questionDTO.getAnswer1());
//                            shuffleArray.add(questionDTO.getAnswer2());
//                            shuffleArray.add(questionDTO.getAnswer3());
//                            shuffleArray.add(questionDTO.getAnswer4());
//                            Collections.shuffle(shuffleArray);
//
//                            rbtnAns1.setText(shuffleArray.get(0));
//                            rbtnAns2.setText(shuffleArray.get(1));
//                            rbtnAns3.setText(shuffleArray.get(2));
//                            rbtnAns4.setText(shuffleArray.get(3));
//                        }
//                  //  }
//               // }
//            }
//            setQuestion();
//        } catch (Exception ex) {
//            Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_cmbExamActionPerformed

    private void txtNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNICActionPerformed
        try {
            List<StudentDTO> allStudents = StudentController.getAllStudents();
            for (StudentDTO allStudent : allStudents) {
                if (txtNIC.getText().equalsIgnoreCase(allStudent.getNic())) {
                    txtStudent.setText(allStudent.getName());
                    txtExamCode.setText(Integer.toString(allStudent.getStudentId()));
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtNICActionPerformed

    private void cmbExamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbExamItemStateChanged
        String cmb=cmbExam.getSelectedItem().toString();
        System.out.println(cmb);
        questionList=new ArrayList();
   //     correctAnswers= new String[questionList.size()];
        
        try {
            List<PaperDTO>paperDTOs=PaperController.getAllPapers();
            for (PaperDTO paperDTO : paperDTOs) {
                if(paperDTO.getExamTitle().matches(cmb)){
                    List<QuestionDTO>questionDTOs=ManageQuestionController.getAllManageQuestions();
                    for (QuestionDTO questionDTO : questionDTOs) {
                        if(questionDTO.getPaperDTO().getExamTitle().matches(cmb)){
                            questionList.add(questionDTO);
//                            correctAnswers[count]=questionDTO.getCarrectAnswer();
                            System.out.println(questionDTO.getQuestionID());
                            System.out.println(questionList.size());
                            //LoardQuestion.setText(questionDTO.getAnswer4());
                            //setQuestion();
//                            LoardQuestion.setText(questionDTO.getQuestion());
//                            String questionId = questionDTO.getQuestionID();
//                            List<String> shuffleArray = new ArrayList<>();
//                            shuffleArray.add(questionDTO.getAnswer1());
//                            shuffleArray.add(questionDTO.getAnswer2());
//                            shuffleArray.add(questionDTO.getAnswer3());
//                            shuffleArray.add(questionDTO.getAnswer4());
//                            Collections.shuffle(shuffleArray);
//
//                            rbtnAns1.setText(shuffleArray.get(0));
//                            rbtnAns2.setText(shuffleArray.get(1));
//                            rbtnAns3.setText(shuffleArray.get(2));
//                            rbtnAns4.setText(shuffleArray.get(3));
                        }
                    }
                }
            }
            setQuestion();
        } catch (Exception ex) {
            Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbExamItemStateChanged

    private void lblTimeNowAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_lblTimeNowAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_lblTimeNowAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea LoardQuestion;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbExam;
    private javax.swing.JComboBox cmbSubject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lbl3;
    private javax.swing.JLabel lbl4;
    private javax.swing.JLabel lblAnswer;
    private javax.swing.JLabel lblCountNow;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblExam;
    private javax.swing.JLabel lblExamCode;
    private javax.swing.JLabel lblExamTime;
    private javax.swing.JLabel lblIconClock;
    private javax.swing.JLabel lblNIC;
    private javax.swing.JLabel lblNextButton;
    private javax.swing.JLabel lblPreviousButton;
    private javax.swing.JLabel lblQCount;
    private javax.swing.JLabel lblQID;
    private javax.swing.JLabel lblQuestionCount;
    private javax.swing.JLabel lblSkipButton;
    private javax.swing.JLabel lblStartButton;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblSubmitButton;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTimeNow;
    private javax.swing.JRadioButton rbtnAns1;
    private javax.swing.JRadioButton rbtnAns2;
    private javax.swing.JRadioButton rbtnAns3;
    private javax.swing.JRadioButton rbtnAns4;
    private javax.swing.JTable tblSkipQuestion;
    private javax.swing.JTable tblYouAnswer;
    private javax.swing.JTextField txtExamCode;
    private javax.swing.JTextField txtExamTime;
    private javax.swing.JTextField txtNIC;
    private javax.swing.JTextField txtQuestionCount;
    private javax.swing.JTextField txtQuestionID;
    private javax.swing.JTextField txtStudent;
    // End of variables declaration//GEN-END:variables

    private void setDate() {
        java.util.Date d = new java.util.Date();
        SimpleDateFormat df = new SimpleDateFormat("YYYY-MM-dd");
        String formateDate = df.format(d);
        lblDate.setText(formateDate);
    }

    private void setTime() {
        java.util.Date t = new java.util.Date();
        SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
        String formateDate = df.format(t);
        lblTime.setText(formateDate);
    }

    @Override
    public void updateObservers() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void loadSubjects() {
        try {
            ArrayList<SubjectDTO> all = (ArrayList<SubjectDTO>) subjectController.getAllSubjects();
            cmbSubject.removeAll();

            for (SubjectDTO all1 : all) {
                cmbSubject.addItem(all1.getSubjectName());
            }
        } catch (Exception e) {
            Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void LoadToExam() {
        try {
            ArrayList<PaperDTO> all = (ArrayList<PaperDTO>) paperController.getAllPapers();
//            List<SubjectDTO> allSubjects = subjectController.getAllSubjects();
//            String Subject = "";
//            
            cmbExam.removeAll();

            for (PaperDTO all1 : all) {
                if (cmbSubject.getSelectedItem().toString().equalsIgnoreCase(all1.getSubjectDTO().getSubjectName())) {
                    System.out.println(all1.getSubjectDTO().getSubjectName());
                    cmbExam.addItem(all1.getExamTitle());
                }
            }
        } catch (Exception e) {
            Logger.getLogger(ExamPaper.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void getSelectedAnswer() {
        answerList = new String[questionList.size()];
        markAnswer = "empty";
        if (buttonGroup1.getSelection()!= null){
           if (rbtnAns1.isSelected()) {
            markAnswer = rbtnAns1.getText();
        } else {
            if (rbtnAns2.isSelected()) {
                markAnswer = rbtnAns2.getText();
            } else {
                if (rbtnAns3.isSelected()) {
                    markAnswer = rbtnAns3.getText();
                } else {
                    if (rbtnAns4.isSelected()) {
                        markAnswer = rbtnAns4.getText();
                    } else{
                        markAnswer = "empty";
                    }
                }
            }
        }
        answerList[count] = markAnswer; 
        }
        
    }

    private void setQuestion() {
        QuestionDTO get = questionList.get(count);
        System.out.println(get.getQuestion());
//        String id = get.getQuestionID();//questionList.get(count);
        correctAnswers=new String[questionList.size()];
        try {
            //boolean manageQuestionController = ManageQuestionController.addManageQuestion(null, null);
//            QuestionDTO searchQuestion = ManageQuestionController.SearchQuestion(id);
            LoardQuestion.setText(get.getQuestion());
            String questionId = get.getQuestionID();
            correctAnswers[count]=get.getCarrectAnswer();
            List<String> shuffleArray = new ArrayList<>();
            shuffleArray.add(get.getAnswer1());
            shuffleArray.add(get.getAnswer2());
            shuffleArray.add(get.getAnswer3());
            shuffleArray.add(get.getAnswer4());
            Collections.shuffle(shuffleArray);

            rbtnAns1.setText(shuffleArray.get(0));
            rbtnAns2.setText(shuffleArray.get(1));
            rbtnAns3.setText(shuffleArray.get(2));
            rbtnAns4.setText(shuffleArray.get(3));
            
            
        } catch (Exception e) {
        }
    }

    private void getMarkedAnswers() {

        String marked = answerList[count];
        if (marked != "empty"){
          if (marked == rbtnAns1.getText()) {
            rbtnAns1.setSelected(true);
        } else {
            if (marked == rbtnAns2.getText()) {
                rbtnAns2.setSelected(true);
            } else {
                if (marked == rbtnAns3.getText()) {
                    rbtnAns3.setSelected(true);
                } else {
                    if (marked == rbtnAns4.getText()) {
                        rbtnAns4.setSelected(true);
                    }
                }
            }
        }  
        }
    }

    private int calculateAnswer() {
        int questionCount = questionList.size();
        
        int corrects = 0;
        for (int i = 0; i < questionList.size(); i++) {
            System.out.println(answerList[i] + "abc" + correctAnswers[i]);
            if (answerList[i].equals(correctAnswers[i])) {
                corrects++;
            }
        }
        return corrects;
    }

    private void calculateResult() {
        String examTitle = cmbExam.getSelectedItem().toString();
        String subject = cmbSubject.getSelectedItem().toString();
        String nic = txtNIC.getText();
        String name = txtStudent.getText();
        String admission = txtExamCode.getText();
        double marks = (calculateAnswer() / questionList.size()) * 100;
        String state = null;
        if (marks > 75) {
            state = "A";
        } else {
            if (marks > 65) {
                state = "B";
            } else {
                if (marks > 55) {
                    state = "C";
                } else {
                    if (marks > 35) {
                        state = "S";
                    } else {
                        state = "F";
                    }
                }
            }
        }
        ResultDTO resultDTO = new ResultDTO(nic, name, examTitle, name, subject, name, state);
        try {
            boolean addResult = ResultController.addResult(resultDTO);
            if (addResult) {
                JOptionPane.showMessageDialog(this, "Result wos Sent Successfully..");
            } else {
                JOptionPane.showMessageDialog(this, "Result Sending Failed");
            }
        } catch (Exception e) {
        }
    }

    private void correctAnswers() {
        correctAnswers = new String[questionList.size()];
        for (int i = 0; i < questionList.size(); i++) {
            try {
                
//                QuestionDTO searchAnswer = ManageQuestionController.SearchQuestion(questionList.get(i));
//                correctAnswers[i] = searchAnswer.getCarrectAnswer();
            } catch (Exception e) {
            }

        }
        for (int i = 0; i < answerList.length; i++) {
            answerList[i] = "empty";

        }
    }

    private void loadStudentDetails() {
//        //txtNIC.setText(nic);
//        try {
//            StudentDTO searchStudent = StudentController.searchStudent(nic);
//            txtStudent.setText(searchStudent.getName());
//        } catch (Exception e) {
//        }
    }

    private void timeDuration(int time1) {
        new Thread(new Runnable() {
            int time = time1 + 1;

            @Override
            public void run() {
                while (time >= 0) {
                    time = --time;
                    lblTimeNow.setText(Integer.toString(time));
                    if (time <= 20 && time > 0) {
                        lblTimeNow.setForeground(Color.red);
                    }
                    if (Integer.parseInt(lblTimeNow.getText()) == 0) {
                        JOptionPane.showMessageDialog(null, "Time is Over...");
                        lblNextButton.setEnabled(false);
                        lblPreviousButton.setEnabled(false);
                        lblSkipButton.setEnabled(false);
                        getSelectedAnswer();
                        calculateAnswer();
                        calculateResult();
                    }
                    try {
                        Thread.sleep(60000);
                    } catch (Exception e) {

                    }
                }
            }
        }).start();
    }
}
